type Query {
   getAllTeacher: [Teacher]
}
#type Mutation{
#    createTeacher(teacher:TeacherInput):Teacher
#}

#type Query {
  #  getAllLectureByTeacher(teacher: TeacherInput): [Lecture]
#}
#type Mutation{
  #  createLecture(teacherId: Int, lecture:LectureInput):Lecture
#}

#type Query{
#    getTeacherById(teacherId :Int):Teacher
#}

#type Query{
   # findAllUniversity: [University]
#}

type Mutation {
    createUniversity(university: UniversityInput): University
}

type Teacher {
    id: Int
    name: String
    firstName: String
    old: Int
    department: Department!
}

input TeacherInput {
    id: Int
   name: String
   firstName: String
    old: Int
    department: Department!
}

type Lecture{
    id: Int
    name: String
    teacher: Teacher
    creditPoint: Int
    semester:Semester
    descriptionModule: String

}

input LectureInput{
    id: Int
    name: String
    teacher: TeacherInput
    creditPoint: Int
    semester:Semester
    descriptionModule: String
}

enum Department {
    Department1,
    Department2,
    Department3,
    Department4,
    Department5,
    Department6,
    Department7,
    Department8

}

enum Semester {
    SEMESTER1,
    SEMESTER2,
    SEMESTER3,
    SEMESTER4,
    SEMESTER5,
    SEMESTER6

}

type University{
    id : ID
    name: String
    teachers:[Teacher]
}

 input UniversityInput{
    id : ID
    name: String
    teachers:[TeacherInput]
}


